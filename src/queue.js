import { Queue } from 'bullmq';
import { redis } from './redis.js';

// –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ–º–∞–Ω–¥
export const commandQueue = new Queue('commands', {
  connection: redis.duplicate(),
  defaultJobOptions: {
    removeOnComplete: 100,  // –•—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
    removeOnFail: 50,       // –•—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –Ω–µ—É–¥–∞—á–Ω—ã—Ö
    attempts: 3,            // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å 3 —Ä–∞–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    backoff: {
      type: 'exponential',
      delay: 1000
    }
  }
});

// –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å
export async function addCommand(type, data) {
  try {
    const job = await commandQueue.add(type, data, {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–∞–Ω–¥
      priority: type === 'DELETE_NODE' ? 1 : 0
    });
    
    console.log(`üì® Command ${type} queued with job ID: ${job.id}`);
    return job.id;
  } catch (error) {
    console.error(`‚ùå Failed to queue command ${type}:`, error);
    throw error;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
export async function getJobStatus(jobId) {
  try {
    const job = await commandQueue.getJob(jobId);
    if (!job) {
      return { status: 'not_found' };
    }
    
    const state = await job.getState();
    const progress = job.progress;
    
    return {
      id: job.id,
      status: state,
      progress,
      data: job.data,
      returnvalue: job.returnvalue,
      failedReason: job.failedReason
    };
  } catch (error) {
    console.error(`‚ùå Failed to get job status:`, error);
    return { status: 'error', error: error.message };
  }
}

// –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
export async function cleanQueue() {
  try {
    await commandQueue.clean(1000 * 60 * 60, 100); // –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ —á–∞—Å–∞
    await commandQueue.clean(1000 * 60 * 60, 100, 'failed');
    console.log('üßπ Queue cleaned');
  } catch (error) {
    console.error('‚ùå Failed to clean queue:', error);
  }
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏
commandQueue.on('completed', (job) => {
  console.log(`‚úÖ Job ${job.id} completed`);
});

commandQueue.on('failed', (job, err) => {
  console.error(`‚ùå Job ${job.id} failed:`, err.message);
});

commandQueue.on('stalled', (jobId) => {
  console.warn(`‚ö†Ô∏è Job ${jobId} stalled`);
});