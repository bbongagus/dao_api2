/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Optimistic UI
 */

import { optimisticAPI } from '../client/optimisticApi.js';

async function runTests() {
  console.log('üß™ Starting Optimistic UI tests...\n');
  
  try {
    // 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    console.log('1. Connecting to WebSocket...');
    await optimisticAPI.connect();
    console.log('‚úÖ Connected\n');
    
    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ
    console.log('2. Loading graph...');
    const graph = await optimisticAPI.loadGraph();
    console.log(`‚úÖ Graph loaded: ${graph.nodes?.length || 0} nodes, ${graph.edges?.length || 0} edges\n`);
    
    // 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª (optimistic)
    console.log('3. Adding new node (optimistic)...');
    const newNode = await optimisticAPI.addNode({
      title: 'Test Node',
      position: { x: 100, y: 100 },
      nodeType: 'dao',
      isDone: false
    });
    console.log(`‚úÖ Node added: ${newNode.id || newNode.nodeId}\n`);
    
    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 4. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —É–∑–ª–∞
    if (newNode.id || newNode.nodeId) {
      console.log('4. Updating node position...');
      await optimisticAPI.updateNodePosition(
        newNode.id || newNode.nodeId,
        { x: 200, y: 200 }
      );
      console.log('‚úÖ Position updated\n');
    }
    
    // 5. –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–∏–Ω —É–∑–µ–ª
    console.log('5. Adding second node...');
    const secondNode = await optimisticAPI.addNode({
      title: 'Second Test Node',
      position: { x: 300, y: 100 },
      nodeType: 'fundamental',
      isDone: false
    });
    console.log(`‚úÖ Second node added: ${secondNode.id || secondNode.nodeId}\n`);
    
    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 6. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
    if ((newNode.id || newNode.nodeId) && (secondNode.id || secondNode.nodeId)) {
      console.log('6. Creating edge between nodes...');
      const edge = await optimisticAPI.addEdge({
        source: newNode.id || newNode.nodeId,
        target: secondNode.id || secondNode.nodeId,
        type: 'floating'
      });
      console.log(`‚úÖ Edge created: ${edge.id || edge.edgeId}\n`);
      
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // 7. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ
    console.log('7. Loading updated graph...');
    const updatedGraph = await optimisticAPI.loadGraph();
    console.log(`‚úÖ Updated graph: ${updatedGraph.nodes?.length || 0} nodes, ${updatedGraph.edges?.length || 0} edges\n`);
    
    // 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º batch update
    console.log('8. Testing batch update...');
    await optimisticAPI.batchUpdate({
      nodes: [
        {
          id: newNode.id || newNode.nodeId,
          title: 'Updated Title'
        }
      ]
    });
    console.log('‚úÖ Batch update sent\n');
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('üéâ All tests completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
    console.log('\nDisconnecting...');
    optimisticAPI.disconnect();
    process.exit(0);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
optimisticAPI.onUpdate = (message) => {
  console.log('üì® Update from server:', message.type);
};

optimisticAPI.onError = (error) => {
  console.error('‚ùå Error from server:', error);
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
console.log('========================================');
console.log('  Optimistic UI Backend Test Suite');
console.log('========================================\n');

runTests();